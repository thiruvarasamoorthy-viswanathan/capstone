version: 2.1

orbs:
  kubernetes: circleci/kubernetes@0.4.0 
  aws-eks: circleci/aws-eks@1.1.0

jobs:
  install-dependencies:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: app dependencies
          working_directory: ./app
          command: npm install
      - save_cache:
          paths: [app/node_modules]
          key: build  

  lint:
      docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch
      working_directory: ~/repo

      steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
          - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  EKS-cluster-infra:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo

    steps:
      - checkout
      - run:
          name: installing dependencies ( eksctl tool)
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/v0.83.0/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            # check eksctl version
            eksctl version
            
      - run:
          name:
          command: |
            eksctl create cluster \
            --name green-$CIRCLE_WORKFLOW_ID \
            --region us-east-1 \
            --nodegroup-name worker-node-$CIRCLE_WORKFLOW_ID \
            --node-type t3.micro \
            --nodes 2 \
            --nodes-min 1 \
            --nodes-max 2 

  docker-build-push:
    working_directory: /app
    docker:
      - image: docker:17.09.0-ce-git
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - deploy:
          name: Push Docker image
          command: |
            DOCKERPATH="vtm1983/udacity-devops-capstone"
            docker build --tag=udacity-devops-capstone .
            docker login -u vtm1983 -p "$DOCKER_PASSWORD"
            docker image tag udacity-devops-capstone $DOCKERPATH:latest
            docker image push $DOCKERPATH
            docker image tag udacity-devops-capstone $DOCKERPATH:${CIRCLE_WORKFLOW_ID:0:7}
            docker image push $DOCKERPATH:${CIRCLE_WORKFLOW_ID:0:7}

  deploy:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -m 0755 kubectl /bin/kubectl
      - run:
          name: Update Deployment
          command: |
            PROJECT=udacity-devops-capstone
            IMAGE="vtm1983/udacity-devops-capstone"
            
            aws sts get-caller-identity
            aws eks update-kubeconfig --name Capstone-Cluster --region us-east-1 
            aws eks update-kubeconfig --name Capstone-Cluster --region us-east-1 --role-arn arn:aws:iam::473230858255:role/aws-service-role/eks.amazonaws.com/AWSServiceRoleForAmazonEKS
            kubectl config view --minify
            kubectl get svc
            
            kubectl apply -f kubernetes/deployment.yml
            kubectl set image deployments/$PROJECT $PROJECT=$IMAGE:${CIRCLE_WORKFLOW_ID:0:7}
            kubectl get nodes
            kubectl get pods            

workflows:
  default:
    jobs:
      - deploy:
          context: aws-cred 
 
