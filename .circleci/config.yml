version: 2.1

orbs:
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.7.0
  aws-cli: circleci/aws-cli@2.0.3

commands: 
  linux-install-aws:
    description: installs awscli v2 using pip
    steps:
      - run: 
          name: install aws cli
          command: |
            
            if (aws --version)
            then 
              export AWSV=$(aws --version | cut -d/ -f2 | cut -d. -f1)
              if  [ $(($AWSV>1)) ]
              then
                echo cli already installed
              else
                echo uninstalling old aws version now
                sudo rm -rf /usr/local/aws
                sudo rm /usr/local/bin/aws  
                echo installing new version now
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                ./aws/install
                aws --version
            fi 
            else  
              echo installing new version now
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              ./aws/install
              aws --version
            fi
jobs:
  linting:
    
    docker:
      - image: python:3.7.3-stretch
    
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
            # Install pylint
            pip install pylint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: Docker lint
          command: |
            . venv/bin/activate
            hadolint Dockerfile
      - run:
          name: pylint
          command: |
            . venv/bin/activate
            pylint app.py --errors-only


  docker-build-push:
    working_directory: /app
    docker:
      - image: docker:17.09.0-ce-git
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - deploy:
          name: Push Docker image
          command: |
            DOCKERPATH="vtm1983/udacity-devops-capstone"
            docker build --tag=udacity-devops-capstone .
            docker login -u vtm1983 -p "$DOCKER_PASSWORD"
            docker image tag udacity-devops-capstone $DOCKERPATH:latest
            docker image push $DOCKERPATH
            docker image tag udacity-devops-capstone $DOCKERPATH:${CIRCLE_WORKFLOW_ID:0:7}
            docker image push $DOCKERPATH:${CIRCLE_WORKFLOW_ID:0:7}

  deploy-app-to-eks:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - aws-cli/setup
      - kubernetes/install
      - run:
          name: Install ekstcl-kubectl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl version
            aws --version
            kubectl version --short --client
      - run:
          name: Create eks-cluster
          command: |     
            eksctl create cluster \
            --name capstone-project-eks \
            --region us-west-2 \
            --nodegroup-name worker-node \
            --node-type t3.micro \
            --nodes 2 \
            --nodes-min 1 \
            --nodes-max 2           
      - run:
          name: Deploy To eks-cluster
          command: |
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin            

            aws eks --region us-west-2 update-kubeconfig --name capstone-project-eks
            kubectl version --client
            export KUBECONFIG=~/.kube/config

            kubectl apply -f k8files/service.yml
            kubectl apply -f k8files/deploy.yml
            kubectl get svc
            kubectl get nodes
            kubectl get pods --all-namespaces            


  testing-eks-app:
    executor: aws-eks/python3
    
    steps:
      - checkout
      - kubernetes/install-kubectl
      - aws-cli/setup
      - run:
          name: smoke-test
          command: |
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin            
            aws eks --region us-west-2 update-kubeconfig --name capstone-project-eks
            kubectl get svc
            kubectl get nodes
            kubectl get deployment
            kubectl get pod
            export loadbalancer=`kubectl get svc -o jsonpath='{ $.items[*].status.loadBalancer}' | cut -b 26-68`
            echo $loadbalancer
            curl "http://$loadbalancer.us-west-2.elb.amazonaws.com/"

  rolling-deployment:
    executor: aws-eks/python3
    steps:
      - checkout
      - kubernetes/install-kubectl
      - aws-cli/setup
      - run:
          name: Rolling-Deployment      
          command: |
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin             
            aws eks --region us-west-2 update-kubeconfig --name capstone-project-eks
            kubectl rollout restart deployment capstone-project
            echo "Rolling Deployment History"            
            kubectl rollout history deployment/capstone-project
            echo "Replicas History"  
            kubectl get rs            
            kubectl get svc
            kubectl get nodes
            kubectl get deployment
            kubectl get pod
            echo Testing App after rolling deployment
            export loadbalancer=`kubectl get svc -o jsonpath='{ $.items[*].status.loadBalancer}' | cut -b 26-68`
            echo $loadbalancer            
            curl "http://$loadbalancer.us-west-2.elb.amazonaws.com/"

workflows:
  Default:
    jobs:
      - linting
      - docker-build-push:
          requires: [linting]
          context: 
            - docker-secrets     
      - deploy-app-to-eks:
          requires: [docker-build-push]
          context: 
            - docker-secrets
            - aws-cred
      - testing-eks-app:   
          requires: [deploy-app-to-eks]
          context: 
            - aws-cred                   
      - rolling-deployment:
          requires: [testing-eks-app]      
          context: 
            - aws-cred        
      


             