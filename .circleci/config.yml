version: 2.1

orbs:
  kubernetes: circleci/kubernetes@0.4.0 
  aws-eks: circleci/aws-eks@1.1.0


commands: 
  linux-install-aws:
    description: installs awscli v2 using pip
    steps:
      - run: 
          name: install aws cli
          command: |
            
            if (aws --version)
            then 
              export AWSV=$(aws --version | cut -d/ -f2 | cut -d. -f1)
              if  [ $(($AWSV>1)) ]
              then
                echo cli already installed
              else
                echo uninstalling old aws version now
                sudo rm -rf /usr/local/aws
                sudo rm /usr/local/bin/aws  
                echo installing new version now
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                ./aws/install
                aws --version
            fi 
            else  
              echo installing new version now
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              ./aws/install
              aws --version
            fi
jobs:
  Lint:
    
    docker:
      - image: python:3.7.3-stretch
    
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
            # Install pylint
            pip install pylint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: Docker lint
          command: |
            . venv/bin/activate
            hadolint Dockerfile
      - run:
          name: pylint
          command: |
            . venv/bin/activate
            pylint app.py --errors-only


  Ekscluster-infrastructure:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo

    steps:
      - checkout
      - run:
          name: installing dependencies ( eksctl tool)
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/v0.83.0/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            # check eksctl version
            eksctl version
            
      - run:
          name:
          command: |
            eksctl create cluster \
            --name prod-green-$CIRCLE_WORKFLOW_ID \
            --region us-east-1 \
            --nodegroup-name worker-node-$CIRCLE_WORKFLOW_ID \
            --node-type t3.micro \
            --nodes 2 \
            --nodes-min 1 \
            --nodes-max 2 


  Kubectl:
    docker:
      - image: amazon/aws-cli
    working_directory: ~/repo
    steps:
      - checkout

      - run:
          name: aws iam auth
          command: |
              curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
              chmod +x ./aws-iam-authenticator
              mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
      - run:
          name: kubectl login
          command: |
              curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
              chmod +x ./kubectl
              mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
              aws eks --region us-west-2 update-kubeconfig --name production-$CIRCLE_WORKFLOW_ID
              kubectl version --client
              export KUBECONFIG=~/.kube/config
              kubectl get svc
              kubectl get nodes 
  



  docker-build-push:
    working_directory: /app
    docker:
      - image: docker:17.09.0-ce-git
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - deploy:
          name: Push Docker image
          command: |
            DOCKERPATH="vtm1983/udacity-devops-capstone"
            docker build --tag=udacity-devops-capstone .
            docker login -u vtm1983 -p "$DOCKER_PASSWORD"
            docker image tag udacity-devops-capstone $DOCKERPATH:latest
            docker image push $DOCKERPATH
            docker image tag udacity-devops-capstone $DOCKERPATH:${CIRCLE_WORKFLOW_ID:0:7}
            docker image push $DOCKERPATH:${CIRCLE_WORKFLOW_ID:0:7}


  deploy-EKS-cluster:
    machine: 
          image: ubuntu-2004:202111-01
    working_directory: ~/repo
    steps:
      - checkout
      - linux-install-aws
      - run:
          name: pull image from repo
          command: |
            docker login -u vtm1983 -p "$DOCKER_PASSWORD"
            docker pull vtm1983/udacity-devops-capstone
            echo "<-- IMAGE PULLED! --> "
      - run:
          name: aws iam auth
          command: |
              curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
              chmod +x ./aws-iam-authenticator
              mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
      - run:
          name: deoploy cluster Green
          command: |
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            aws eks --region us-west-2 update-kubeconfig --name prod-green-$CIRCLE_WORKFLOW_ID
            kubectl version --client
            export KUBECONFIG=~/.kube/config
            kubectl apply -f eks/k8s-deploy.yml
            echo "<-- CLUSTER DEPLOYED! --> "
            kubectl apply -f eks/k8s-service.yml
            echo "<-- Loadbalancer service --> "
            kubectl get svc
            echo "<-- CLUSTER DEPLOYED! --> "
            echo "<-- CLUSTER NODES --> "
            kubectl get nodes
            echo "<-- CLUSTER PODS --> "
            kubectl get pods --all-namespaces
      - run:
          name: Delete Blue deployment
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/v0.83.0/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl delete cluster --name prod-blue

workflows:
  Default:
    jobs:
      - deploy-EKS-cluster:
          context: 
            - docker-secrets
            - aws-cred